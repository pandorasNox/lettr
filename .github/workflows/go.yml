# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build, Test, Lint

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Setup Node.js environment
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        #node-version: 22.15.0
        # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
        node-version-file: ./web/package.json
        # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
        #architecture: # optional
        # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
        cache: npm
        # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
        cache-dependency-path: ./web/package-lock.json

    - name: Build Typescript and Tailwind
      run: |
        (
          cd web;
          npm install;
          ./../scripts/tailwind_build.sh;
          ./node_modules/.bin/esbuild app/main.ts --tsconfig=app/tsconfig.json --bundle --minify --outfile=static/generated/main.js;
        )

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: '1.24.4'

    - name: Build
      run: go build -v ./...

    - name: Run shellcheck (via container)
      run: ./scripts/checks/shellcheck.sh

    # - name: Test
    #   run: go test -v ./...
    - name: run test (via container build test target)
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: .
        file: container-images/app/Dockerfile
        target: tester
        provenance: false # provenance = Generate provenance attestation for the build (shorthand for --attest=type=provenance)
        platforms: linux/amd64
        push: false

    - name: golangci-lint
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
      with:
        version: v2.2.1

    - name: build the container image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: .
        file: container-images/app/Dockerfile
        target: prod
        provenance: false # provenance = Generate provenance attestation for the build (shorthand for --attest=type=provenance)
        platforms: linux/amd64
        push: false

    - name: run browser e2e tests with playwright (via docker compose)
      run: ./tests/playwright/playwright.sh
